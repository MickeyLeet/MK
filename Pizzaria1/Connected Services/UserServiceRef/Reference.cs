//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pizzaria1.UserServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceRef.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registrer", ReplyAction="http://tempuri.org/IUserService/RegistrerResponse")]
        void Registrer(string Login, string Email, string Password, string RepeatPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registrer", ReplyAction="http://tempuri.org/IUserService/RegistrerResponse")]
        System.Threading.Tasks.Task RegistrerAsync(string Login, string Email, string Password, string RepeatPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        bool Login([System.ServiceModel.MessageParameterAttribute(Name="Login")] string Login1, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrder", ReplyAction="http://tempuri.org/IUserService/AddOrderResponse")]
        void AddOrder(string OrderComp, System.DateTime OrderDate, string OrderStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrder", ReplyAction="http://tempuri.org/IUserService/AddOrderResponse")]
        System.Threading.Tasks.Task AddOrderAsync(string OrderComp, System.DateTime OrderDate, string OrderStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Pizzaria1.UserServiceRef.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Pizzaria1.UserServiceRef.IUserService>, Pizzaria1.UserServiceRef.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Registrer(string Login, string Email, string Password, string RepeatPassword) {
            base.Channel.Registrer(Login, Email, Password, RepeatPassword);
        }
        
        public System.Threading.Tasks.Task RegistrerAsync(string Login, string Email, string Password, string RepeatPassword) {
            return base.Channel.RegistrerAsync(Login, Email, Password, RepeatPassword);
        }
        
        public bool Login(string Login1, string Password) {
            return base.Channel.Login(Login1, Password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string Login, string Password) {
            return base.Channel.LoginAsync(Login, Password);
        }
        
        public void AddOrder(string OrderComp, System.DateTime OrderDate, string OrderStatus) {
            base.Channel.AddOrder(OrderComp, OrderDate, OrderStatus);
        }
        
        public System.Threading.Tasks.Task AddOrderAsync(string OrderComp, System.DateTime OrderDate, string OrderStatus) {
            return base.Channel.AddOrderAsync(OrderComp, OrderDate, OrderStatus);
        }
    }
}
